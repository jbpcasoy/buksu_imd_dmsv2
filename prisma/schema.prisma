datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    isAdmin Boolean   @default(false) // changed in auth route, not modified in database
    Faculty Faculty[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model College {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name       String       @unique
    Department Department[]
}

model Department {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    College   College   @relation(fields: [collegeId], references: [id])
    name      String    @unique
    collegeId String
    Faculty   Faculty[]
}

model Faculty {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    User          User           @relation(fields: [userId], references: [id])
    userId        String
    Department    Department     @relation(fields: [departmentId], references: [id])
    departmentId  String
    IM            IM[]
    ActiveFaculty ActiveFaculty?
    Chairperson   Chairperson?
    Coordinator   Coordinator?
    Dean          Dean?

    @@unique([departmentId, userId])
}

model ActiveFaculty {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Faculty   Faculty @relation(fields: [facultyId], references: [id])
    facultyId String  @unique
}

enum IMType {
    MODULE
    COURSE_FILE
    WORKTEXT
    TEXTBOOK
}

model IM {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Faculty   Faculty  @relation(fields: [facultyId], references: [id])
    facultyId String
    title     String
    type      IMType
    IMFile    IMFile[]
}

model IMFile {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    IM               IM            @relation(fields: [iMId], references: [id])
    iMId             String
    filename         String
    size             Int
    mimetype         String
    originalFilename String
    ActiveIMFile     ActiveIMFile?
}

model ActiveIMFile {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    IMFile   IMFile @relation(fields: [iMFileId], references: [id])
    iMFileId String @unique
}

model Chairperson {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Faculty           Faculty            @relation(fields: [facultyId], references: [id])
    facultyId         String             @unique
    ActiveChairperson ActiveChairperson?
}

model Coordinator {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Faculty           Faculty            @relation(fields: [facultyId], references: [id])
    facultyId         String             @unique
    ActiveCoordinator ActiveCoordinator?
}

model Dean {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Faculty    Faculty     @relation(fields: [facultyId], references: [id])
    facultyId  String      @unique
    ActiveDean ActiveDean?
}

model ActiveCoordinator {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Coordinator   Coordinator @relation(fields: [coordinatorId], references: [id])
    coordinatorId String      @unique
}

model ActiveChairperson {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Chairperson   Chairperson @relation(fields: [chairpersonId], references: [id])
    chairpersonId String      @unique
}

model ActiveDean {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Dean   Dean   @relation(fields: [deanId], references: [id])
    deanId String @unique
}

//ActiveCoordinator
//ActiveChairperson
//ActiveDean

//DepartmentApproval
//PeerApproval 
//CoordinatorApproval
//ChairpersonApproval
//Attachment 
//IMReviewSection
//IMReviewQuestion
//PeerReview
//PeerReviewItem
//SubmittedPeerReview
//ChairpersonReview
//ChairpersonReviewItem
//SubmittedChairpersonReview
//CoordinatorReview 
//CoordinatorReviewItem 
//SubmittedCoordinatorReview 
//PeerSuggestion 
//PeerSuggestionItem
//ChairpersonSuggestion
//ChairpersonSuggestionItem 
//CoordinatorSuggestion 
//CoordinatorSuggestionItem 
//Notification 
//ReadNotification
//Admin
//LoginRole 
//SubmittedPeerSuggestion
//SubmittedCoordinatorSuggestion
//SubmittedChairpersonSuggestion
//CoordinatorEndorsement
//DeanEndorsement
//IMDCoordinator
//ActiveIMDCoordinator
//CITLDirector 
//ActiveCITLDirector 
//IMDCoordinatorSuggestion 
//IMDCoordinatorSuggestionItem 
//SubmittedIMDCoordinatorSuggestion
//IMDCoordinatorEndorsement
//CITLDirectorEndorsement 
//IMEvent
//Announcement
//Settings
//QamisSuggestion
//QamisSuggestionItem
//SubmittedQamisSuggestion
