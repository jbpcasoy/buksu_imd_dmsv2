datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    isAdmin        Boolean         @default(false) // changed in auth route, not modified in database
    Faculty        Faculty[]
    IDDCoordinator IDDCoordinator?
    CITLDirector   CITLDirector?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model College {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name       String       @unique
    Department Department[]
}

model Department {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    College   College   @relation(fields: [collegeId], references: [id])
    name      String    @unique
    collegeId String
    Faculty   Faculty[]
}

model Faculty {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    User          User           @relation(fields: [userId], references: [id])
    userId        String
    Department    Department     @relation(fields: [departmentId], references: [id])
    departmentId  String
    IM            IM[]
    ActiveFaculty ActiveFaculty?
    Chairperson   Chairperson?
    Coordinator   Coordinator?
    Dean          Dean?
    PeerReview    PeerReview[]

    @@unique([departmentId, userId])
}

model ActiveFaculty {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Faculty   Faculty @relation(fields: [facultyId], references: [id])
    facultyId String  @unique
}

enum IMType {
    MODULE
    COURSE_FILE
    WORKTEXT
    TEXTBOOK
}

model IM {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Faculty   Faculty  @relation(fields: [facultyId], references: [id])
    facultyId String
    title     String
    type      IMType
    IMFile    IMFile[]
}

model IMFile {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    IM                 IM                  @relation(fields: [iMId], references: [id])
    iMId               String
    filename           String
    size               Int
    mimetype           String
    originalFilename   String
    DepartmentReview   DepartmentReview?
    DepartmentRevision DepartmentRevision?
    CITLRevision       CITLRevision?
}

model Chairperson {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Faculty           Faculty             @relation(fields: [facultyId], references: [id])
    facultyId         String              @unique
    ActiveChairperson ActiveChairperson?
    ChairpersonReview ChairpersonReview[]
}

model Coordinator {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Faculty                Faculty                  @relation(fields: [facultyId], references: [id])
    facultyId              String                   @unique
    ActiveCoordinator      ActiveCoordinator?
    CoordinatorReview      CoordinatorReview[]
    CoordinatorEndorsement CoordinatorEndorsement[]
}

model Dean {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Faculty         Faculty           @relation(fields: [facultyId], references: [id])
    facultyId       String            @unique
    ActiveDean      ActiveDean?
    DeanEndorsement DeanEndorsement[]
}

model ActiveCoordinator {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Coordinator   Coordinator @relation(fields: [coordinatorId], references: [id])
    coordinatorId String      @unique
}

model ActiveChairperson {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Chairperson   Chairperson @relation(fields: [chairpersonId], references: [id])
    chairpersonId String      @unique
}

model ActiveDean {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Dean   Dean   @relation(fields: [deanId], references: [id])
    deanId String @unique
}

model DepartmentReview {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    IMFile            IMFile             @relation(fields: [iMFileId], references: [id])
    iMFileId          String             @unique
    PeerReview        PeerReview?
    ChairpersonReview ChairpersonReview?
    CoordinatorReview CoordinatorReview?
}

enum Rating {
    VM
    M
    JE
    NM
    NAA
}

// ratings are optional in the database
// ratings will be validated on the api only to allow adjustments on questions
// see corresponding questions on readme file
model PeerReview {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    q1_1               Rating?
    q1_2               Rating?
    q2_1               Rating?
    q2_2               Rating?
    q2_3               Rating?
    q2_4               Rating?
    q3_1               Rating?
    q4_1               Rating?
    q4_2               Rating?
    q4_3               Rating?
    q5_1               Rating?
    q5_2               Rating?
    q5_3               Rating?
    q6_1               Rating?
    q6_2               Rating?
    q6_3               Rating?
    q6_4               Rating?
    q6_5               Rating?
    q7_1               Rating?
    q7_2               Rating?
    q7_3               Rating?
    q7_4               Rating?
    q7_5               Rating?
    q8_1               Rating?
    q8_2               Rating?
    q8_3               Rating?
    PeerSuggestion     PeerSuggestion?
    DepartmentReview   DepartmentReview @relation(fields: [departmentReviewId], references: [id])
    departmentReviewId String           @unique
    Faculty            Faculty          @relation(fields: [facultyId], references: [id])
    facultyId          String
}

model PeerSuggestion {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    PeerReview              PeerReview               @relation(fields: [peerReviewId], references: [id])
    peerReviewId            String                   @unique
    PeerSuggestionItem      PeerSuggestionItem[]
    SubmittedPeerSuggestion SubmittedPeerSuggestion?
}

model PeerSuggestionItem {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    suggestion       String
    actionTaken      String?
    remarks          String?
    PeerSuggestion   PeerSuggestion @relation(fields: [peerSuggestionId], references: [id])
    peerSuggestionId String
    pageNumber       Int
}

model SubmittedPeerSuggestion {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    PeerSuggestion     PeerSuggestion      @relation(fields: [peerSuggestionId], references: [id])
    peerSuggestionId   String              @unique
    DepartmentReviewed DepartmentReviewed?
}

model ChairpersonReview {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    q1_1                  Rating?
    q1_2                  Rating?
    q2_1                  Rating?
    q2_2                  Rating?
    q2_3                  Rating?
    q2_4                  Rating?
    q3_1                  Rating?
    q4_1                  Rating?
    q4_2                  Rating?
    q4_3                  Rating?
    q5_1                  Rating?
    q5_2                  Rating?
    q5_3                  Rating?
    q6_1                  Rating?
    q6_2                  Rating?
    q6_3                  Rating?
    q6_4                  Rating?
    q6_5                  Rating?
    q7_1                  Rating?
    q7_2                  Rating?
    q7_3                  Rating?
    q7_4                  Rating?
    q7_5                  Rating?
    q8_1                  Rating?
    q8_2                  Rating?
    q8_3                  Rating?
    ChairpersonSuggestion ChairpersonSuggestion?
    DepartmentReview      DepartmentReview       @relation(fields: [departmentReviewId], references: [id])
    departmentReviewId    String                 @unique
    Chairperson           Chairperson            @relation(fields: [chairpersonId], references: [id])
    chairpersonId         String
}

model ChairpersonSuggestion {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    ChairpersonReview              ChairpersonReview               @relation(fields: [chairpersonReviewId], references: [id])
    chairpersonReviewId            String                          @unique
    ChairpersonSuggestionItem      ChairpersonSuggestionItem[]
    SubmittedChairpersonSuggestion SubmittedChairpersonSuggestion?
}

model ChairpersonSuggestionItem {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    suggestion              String
    actionTaken             String?
    remarks                 String?
    ChairpersonSuggestion   ChairpersonSuggestion @relation(fields: [chairpersonSuggestionId], references: [id])
    chairpersonSuggestionId String
    pageNumber              Int
}

model SubmittedChairpersonSuggestion {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    ChairpersonSuggestion   ChairpersonSuggestion @relation(fields: [chairpersonSuggestionId], references: [id])
    chairpersonSuggestionId String                @unique
    DepartmentReviewed      DepartmentReviewed?
}

model CoordinatorReview {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    q1_1                  Rating?
    q1_2                  Rating?
    q2_1                  Rating?
    q2_2                  Rating?
    q2_3                  Rating?
    q2_4                  Rating?
    q3_1                  Rating?
    q4_1                  Rating?
    q4_2                  Rating?
    q4_3                  Rating?
    q5_1                  Rating?
    q5_2                  Rating?
    q5_3                  Rating?
    q6_1                  Rating?
    q6_2                  Rating?
    q6_3                  Rating?
    q6_4                  Rating?
    q6_5                  Rating?
    q7_1                  Rating?
    q7_2                  Rating?
    q7_3                  Rating?
    q7_4                  Rating?
    q7_5                  Rating?
    q8_1                  Rating?
    q8_2                  Rating?
    q8_3                  Rating?
    CoordinatorSuggestion CoordinatorSuggestion?
    DepartmentReview      DepartmentReview       @relation(fields: [departmentReviewId], references: [id])
    departmentReviewId    String                 @unique
    Coordinator           Coordinator            @relation(fields: [coordinatorId], references: [id])
    coordinatorId         String
}

model CoordinatorSuggestion {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    CoordinatorReview              CoordinatorReview               @relation(fields: [coordinatorReviewId], references: [id])
    coordinatorReviewId            String                          @unique
    CoordinatorSuggestionItem      CoordinatorSuggestionItem[]
    SubmittedCoordinatorSuggestion SubmittedCoordinatorSuggestion?
}

model CoordinatorSuggestionItem {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    suggestion              String
    actionTaken             String?
    remarks                 String?
    CoordinatorSuggestion   CoordinatorSuggestion @relation(fields: [coordinatorSuggestionId], references: [id])
    coordinatorSuggestionId String
    pageNumber              Int
}

model SubmittedCoordinatorSuggestion {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    CoordinatorSuggestion   CoordinatorSuggestion @relation(fields: [coordinatorSuggestionId], references: [id])
    coordinatorSuggestionId String                @unique
    DepartmentReviewed      DepartmentReviewed?
}

model DepartmentReviewed {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    SubmittedCoordinatorSuggestion   SubmittedCoordinatorSuggestion @relation(fields: [submittedCoordinatorSuggestionId], references: [id])
    submittedCoordinatorSuggestionId String                         @unique
    SubmittedChairpersonSuggestion   SubmittedChairpersonSuggestion @relation(fields: [submittedChairpersonSuggestionId], references: [id])
    submittedChairpersonSuggestionId String                         @unique
    SubmittedPeerSuggestion          SubmittedPeerSuggestion        @relation(fields: [submittedPeerSuggestionId], references: [id])
    submittedPeerSuggestionId        String                         @unique
    DepartmentRevision               DepartmentRevision?
}

model DepartmentRevision {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    DepartmentReviewed     DepartmentReviewed      @relation(fields: [departmentReviewedId], references: [id])
    departmentReviewedId   String                  @unique
    IMFile                 IMFile                  @relation(fields: [iMFileId], references: [id])
    iMFileId               String                  @unique
    returned               Boolean                 @default(false)
    CoordinatorEndorsement CoordinatorEndorsement?
}

model CoordinatorEndorsement {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    DepartmentRevision   DepartmentRevision @relation(fields: [departmentRevisionId], references: [id])
    departmentRevisionId String             @unique
    Coordinator          Coordinator        @relation(fields: [coordinatorId], references: [id])
    coordinatorId        String
    DeanEndorsement      DeanEndorsement?
}

model DeanEndorsement {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    CoordinatorEndorsement   CoordinatorEndorsement    @relation(fields: [coordinatorEndorsementId], references: [id])
    coordinatorEndorsementId String                    @unique
    Dean                     Dean                      @relation(fields: [deanId], references: [id])
    deanId                   String
    IDDCoordinatorSuggestion IDDCoordinatorSuggestion?
}

model IDDCoordinator {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    User                     User                       @relation(fields: [userId], references: [id])
    userId                   String                     @unique
    ActiveIDDCoordinator     ActiveIDDCoordinator?
    IDDCoordinatorSuggestion IDDCoordinatorSuggestion[]
}

model ActiveIDDCoordinator {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    IDDCoordinator   IDDCoordinator @relation(fields: [iDDCoordinatorId], references: [id])
    iDDCoordinatorId String         @unique
}

model CITLDirector {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    User               User                @relation(fields: [userId], references: [id])
    userId             String              @unique
    ActiveCITLDirector ActiveCITLDirector?
}

model ActiveCITLDirector {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    CITLDirector   CITLDirector @relation(fields: [cITLDirectorId], references: [id])
    cITLDirectorId String       @unique
}

model IDDCoordinatorSuggestion {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    DeanEndorsement                   DeanEndorsement                    @relation(fields: [deanEndorsementId], references: [id])
    deanEndorsementId                 String                             @unique
    IDDCoordinator                    IDDCoordinator                     @relation(fields: [iDDCoordinatorId], references: [id])
    iDDCoordinatorId                  String
    IDDCoordinatorSuggestionItem      IDDCoordinatorSuggestionItem[]
    SubmittedIDDCoordinatorSuggestion SubmittedIDDCoordinatorSuggestion?
}

model IDDCoordinatorSuggestionItem {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    IDDCoordinatorSuggestion   IDDCoordinatorSuggestion @relation(fields: [iDDCoordinatorSuggestionId], references: [id])
    iDDCoordinatorSuggestionId String
    suggestion                 String
    actionTaken                String?
    remarks                    String?
    pageNumber                 Int
}

model SubmittedIDDCoordinatorSuggestion {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    IDDCoordinatorSuggestion   IDDCoordinatorSuggestion @relation(fields: [iDDCoordinatorSuggestionId], references: [id])
    iDDCoordinatorSuggestionId String                   @unique
    CITLRevision               CITLRevision[]
}

model CITLRevision {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    SubmittedIDDCoordinatorSuggestion   SubmittedIDDCoordinatorSuggestion @relation(fields: [submittedIDDCoordinatorSuggestionId], references: [id])
    submittedIDDCoordinatorSuggestionId String
    returned                            Boolean                           @default(false)
    IMFile                              IMFile                            @relation(fields: [iMFileId], references: [id])
    iMFileId                            String                            @unique
    IDDEndorsement                      IDDEndorsement?
}

model IDDEndorsement {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    CITLRevision            CITLRevision             @relation(fields: [cITLRevisionId], references: [id])
    cITLRevisionId          String                   @unique
    CITLDirectorEndorsement CITLDirectorEndorsement?
}

model CITLDirectorEndorsement {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    IDDEndorsement   IDDEndorsement @relation(fields: [iDDEndorsementId], references: [id])
    iDDEndorsementId String         @unique
}
