datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    isAdmin            Boolean              @default(false) // changed in auth route, not modified in database
    Faculty            Faculty[]
    IDDCoordinator     IDDCoordinator?
    CITLDirector       CITLDirector?
    Event              Event[]
    NotificationRead   NotificationRead[]
    ProfilePictureFile ProfilePictureFile[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model College {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name       String       @unique
    Department Department[]
}

model Department {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    College   College   @relation(fields: [collegeId], references: [id])
    name      String    @unique
    collegeId String
    Faculty   Faculty[]
}

model Faculty {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    User              User               @relation(fields: [userId], references: [id])
    userId            String
    Department        Department         @relation(fields: [departmentId], references: [id])
    departmentId      String
    IM                IM[]
    ActiveFaculty     ActiveFaculty?
    Chairperson       Chairperson?
    Coordinator       Coordinator?
    Dean              Dean?
    PeerReview        PeerReview[]
    ContentSpecialist ContentSpecialist?

    @@unique([departmentId, userId])
}

model ActiveFaculty {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Faculty   Faculty @relation(fields: [facultyId], references: [id])
    facultyId String  @unique
}

enum IMType {
    MODULE
    COURSE_FILE
    WORKTEXT
    TEXTBOOK
}

model IM {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Faculty        Faculty          @relation(fields: [facultyId], references: [id])
    facultyId      String
    title          String
    type           IMType
    IMFile         IMFile[]
    Event          Event[]
    PlagiarismFile PlagiarismFile[]
}

model IMFile {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    IM                 IM                  @relation(fields: [iMId], references: [id], onDelete: Cascade)
    iMId               String
    filename           String
    size               Int
    mimetype           String
    originalFilename   String
    DepartmentReview   DepartmentReview?
    DepartmentRevision DepartmentRevision?
    CITLRevision       CITLRevision?
    QAMISRevision      QAMISRevision?
    IMERCCITLRevision  IMERCCITLRevision?
}

model Chairperson {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Faculty                     Faculty                       @relation(fields: [facultyId], references: [id])
    facultyId                   String                        @unique
    ActiveChairperson           ActiveChairperson?
    ChairpersonReview           ChairpersonReview[]
    QAMISChairpersonEndorsement QAMISChairpersonEndorsement[]
}

model Coordinator {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Faculty                     Faculty                       @relation(fields: [facultyId], references: [id])
    facultyId                   String                        @unique
    ActiveCoordinator           ActiveCoordinator?
    CoordinatorReview           CoordinatorReview[]
    CoordinatorEndorsement      CoordinatorEndorsement[]
    QAMISCoordinatorEndorsement QAMISCoordinatorEndorsement[]
    ReturnedDepartmentRevision  ReturnedDepartmentRevision[]
}

model Dean {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Faculty              Faculty                @relation(fields: [facultyId], references: [id])
    facultyId            String                 @unique
    ActiveDean           ActiveDean?
    DeanEndorsement      DeanEndorsement[]
    QAMISDeanEndorsement QAMISDeanEndorsement[]
}

model ActiveCoordinator {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Coordinator   Coordinator @relation(fields: [coordinatorId], references: [id])
    coordinatorId String      @unique
}

model ActiveChairperson {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Chairperson   Chairperson @relation(fields: [chairpersonId], references: [id])
    chairpersonId String      @unique
}

model ActiveDean {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Dean   Dean   @relation(fields: [deanId], references: [id])
    deanId String @unique
}

model DepartmentReview {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    IMFile            IMFile             @relation(fields: [iMFileId], references: [id], onDelete: Cascade)
    iMFileId          String             @unique
    PeerReview        PeerReview?
    ChairpersonReview ChairpersonReview?
    CoordinatorReview CoordinatorReview?
    Event             Event[]
}

enum Rating {
    VM
    M
    JE
    NM
    NAA
}

// ratings are optional in the database
// ratings will be validated on the api only to allow adjustments on questions
// see corresponding questions on readme file
model PeerReview {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    q1_1               Rating?
    q1_2               Rating?
    q2_1               Rating?
    q2_2               Rating?
    q2_3               Rating?
    q2_4               Rating?
    q3_1               Rating?
    q4_1               Rating?
    q4_2               Rating?
    q4_3               Rating?
    q5_1               Rating?
    q5_2               Rating?
    q5_3               Rating?
    q6_1               Rating?
    q6_2               Rating?
    q6_3               Rating?
    q6_4               Rating?
    q6_5               Rating?
    q7_1               Rating?
    q7_2               Rating?
    q7_3               Rating?
    q7_4               Rating?
    q7_5               Rating?
    q8_1               Rating?
    q8_2               Rating?
    q8_3               Rating?
    PeerSuggestion     PeerSuggestion?
    DepartmentReview   DepartmentReview @relation(fields: [departmentReviewId], references: [id], onDelete: Cascade)
    departmentReviewId String           @unique
    Faculty            Faculty          @relation(fields: [facultyId], references: [id])
    facultyId          String
}

model PeerSuggestion {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    PeerReview              PeerReview               @relation(fields: [peerReviewId], references: [id], onDelete: Cascade)
    peerReviewId            String                   @unique
    PeerSuggestionItem      PeerSuggestionItem[]
    SubmittedPeerSuggestion SubmittedPeerSuggestion?
}

model PeerSuggestionItem {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    suggestion                    String
    actionTaken                   String?
    remarks                       String?
    PeerSuggestion                PeerSuggestion                 @relation(fields: [peerSuggestionId], references: [id], onDelete: Cascade)
    peerSuggestionId              String
    pageNumber                    Int
    PeerSuggestionItemActionTaken PeerSuggestionItemActionTaken?
}

model SubmittedPeerSuggestion {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    PeerSuggestion     PeerSuggestion      @relation(fields: [peerSuggestionId], references: [id], onDelete: Cascade)
    peerSuggestionId   String              @unique
    DepartmentReviewed DepartmentReviewed?
    Event              Event[]
}

model ChairpersonReview {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    q1_1                  Rating?
    q1_2                  Rating?
    q2_1                  Rating?
    q2_2                  Rating?
    q2_3                  Rating?
    q2_4                  Rating?
    q3_1                  Rating?
    q4_1                  Rating?
    q4_2                  Rating?
    q4_3                  Rating?
    q5_1                  Rating?
    q5_2                  Rating?
    q5_3                  Rating?
    q6_1                  Rating?
    q6_2                  Rating?
    q6_3                  Rating?
    q6_4                  Rating?
    q6_5                  Rating?
    q7_1                  Rating?
    q7_2                  Rating?
    q7_3                  Rating?
    q7_4                  Rating?
    q7_5                  Rating?
    q8_1                  Rating?
    q8_2                  Rating?
    q8_3                  Rating?
    ChairpersonSuggestion ChairpersonSuggestion?
    DepartmentReview      DepartmentReview       @relation(fields: [departmentReviewId], references: [id], onDelete: Cascade)
    departmentReviewId    String                 @unique
    Chairperson           Chairperson            @relation(fields: [chairpersonId], references: [id])
    chairpersonId         String
}

model ChairpersonSuggestion {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    ChairpersonReview              ChairpersonReview               @relation(fields: [chairpersonReviewId], references: [id], onDelete: Cascade)
    chairpersonReviewId            String                          @unique
    ChairpersonSuggestionItem      ChairpersonSuggestionItem[]
    SubmittedChairpersonSuggestion SubmittedChairpersonSuggestion?
}

model ChairpersonSuggestionItem {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    suggestion                           String
    actionTaken                          String?
    remarks                              String?
    ChairpersonSuggestion                ChairpersonSuggestion                 @relation(fields: [chairpersonSuggestionId], references: [id], onDelete: Cascade)
    chairpersonSuggestionId              String
    pageNumber                           Int
    ChairpersonSuggestionItemActionTaken ChairpersonSuggestionItemActionTaken?
}

model SubmittedChairpersonSuggestion {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    ChairpersonSuggestion   ChairpersonSuggestion @relation(fields: [chairpersonSuggestionId], references: [id], onDelete: Cascade)
    chairpersonSuggestionId String                @unique
    DepartmentReviewed      DepartmentReviewed?
    Event                   Event[]
}

model CoordinatorReview {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    q1_1                  Rating?
    q1_2                  Rating?
    q2_1                  Rating?
    q2_2                  Rating?
    q2_3                  Rating?
    q2_4                  Rating?
    q3_1                  Rating?
    q4_1                  Rating?
    q4_2                  Rating?
    q4_3                  Rating?
    q5_1                  Rating?
    q5_2                  Rating?
    q5_3                  Rating?
    q6_1                  Rating?
    q6_2                  Rating?
    q6_3                  Rating?
    q6_4                  Rating?
    q6_5                  Rating?
    q7_1                  Rating?
    q7_2                  Rating?
    q7_3                  Rating?
    q7_4                  Rating?
    q7_5                  Rating?
    q8_1                  Rating?
    q8_2                  Rating?
    q8_3                  Rating?
    CoordinatorSuggestion CoordinatorSuggestion?
    DepartmentReview      DepartmentReview       @relation(fields: [departmentReviewId], references: [id], onDelete: Cascade)
    departmentReviewId    String                 @unique
    Coordinator           Coordinator            @relation(fields: [coordinatorId], references: [id])
    coordinatorId         String
}

model CoordinatorSuggestion {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    CoordinatorReview              CoordinatorReview               @relation(fields: [coordinatorReviewId], references: [id], onDelete: Cascade)
    coordinatorReviewId            String                          @unique
    CoordinatorSuggestionItem      CoordinatorSuggestionItem[]
    SubmittedCoordinatorSuggestion SubmittedCoordinatorSuggestion?
}

model CoordinatorSuggestionItem {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    suggestion                           String
    actionTaken                          String?
    remarks                              String?
    CoordinatorSuggestion                CoordinatorSuggestion                 @relation(fields: [coordinatorSuggestionId], references: [id], onDelete: Cascade)
    coordinatorSuggestionId              String
    pageNumber                           Int
    CoordinatorSuggestionItemActionTaken CoordinatorSuggestionItemActionTaken?
}

model SubmittedCoordinatorSuggestion {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    CoordinatorSuggestion   CoordinatorSuggestion @relation(fields: [coordinatorSuggestionId], references: [id], onDelete: Cascade)
    coordinatorSuggestionId String                @unique
    DepartmentReviewed      DepartmentReviewed?
    Event                   Event[]
}

model DepartmentReviewed {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    SubmittedCoordinatorSuggestion   SubmittedCoordinatorSuggestion @relation(fields: [submittedCoordinatorSuggestionId], references: [id], onDelete: Cascade)
    submittedCoordinatorSuggestionId String                         @unique
    SubmittedChairpersonSuggestion   SubmittedChairpersonSuggestion @relation(fields: [submittedChairpersonSuggestionId], references: [id], onDelete: Cascade)
    submittedChairpersonSuggestionId String                         @unique
    SubmittedPeerSuggestion          SubmittedPeerSuggestion        @relation(fields: [submittedPeerSuggestionId], references: [id], onDelete: Cascade)
    submittedPeerSuggestionId        String                         @unique
    DepartmentRevision               DepartmentRevision[]
    Event                            Event[]
}

model DepartmentRevision {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    DepartmentReviewed         DepartmentReviewed          @relation(fields: [departmentReviewedId], references: [id], onDelete: Cascade)
    departmentReviewedId       String
    IMFile                     IMFile                      @relation(fields: [iMFileId], references: [id], onDelete: Cascade)
    iMFileId                   String                      @unique
    CoordinatorEndorsement     CoordinatorEndorsement?
    Event                      Event[]
    ReturnedDepartmentRevision ReturnedDepartmentRevision?
}

model CoordinatorEndorsement {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    DepartmentRevision   DepartmentRevision @relation(fields: [departmentRevisionId], references: [id], onDelete: Cascade)
    departmentRevisionId String             @unique
    Coordinator          Coordinator        @relation(fields: [coordinatorId], references: [id])
    coordinatorId        String
    DeanEndorsement      DeanEndorsement?
    Event                Event[]
}

model DeanEndorsement {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    CoordinatorEndorsement   CoordinatorEndorsement    @relation(fields: [coordinatorEndorsementId], references: [id], onDelete: Cascade)
    coordinatorEndorsementId String                    @unique
    Dean                     Dean                      @relation(fields: [deanId], references: [id])
    deanId                   String
    IDDCoordinatorSuggestion IDDCoordinatorSuggestion?
    Event                    Event[]
}

model IDDCoordinator {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    User                           User                             @relation(fields: [userId], references: [id])
    userId                         String                           @unique
    ActiveIDDCoordinator           ActiveIDDCoordinator?
    IDDCoordinatorSuggestion       IDDCoordinatorSuggestion[]
    IDDCoordinatorEndorsement      IDDCoordinatorEndorsement[]
    IDDSpecialistReview            IDDSpecialistReview[]
    IMERCIDDCoordinatorEndorsement IMERCIDDCoordinatorEndorsement[]
    ReturnedCITLRevision           ReturnedCITLRevision[]
    ReturnedIMERCCITLRevision      ReturnedIMERCCITLRevision[]
}

model ActiveIDDCoordinator {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    IDDCoordinator   IDDCoordinator @relation(fields: [iDDCoordinatorId], references: [id])
    iDDCoordinatorId String         @unique
}

model CITLDirector {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    User                         User                           @relation(fields: [userId], references: [id])
    userId                       String                         @unique
    ActiveCITLDirector           ActiveCITLDirector?
    CITLDirectorEndorsement      CITLDirectorEndorsement[]
    ContentEditorReview          ContentEditorReview[]
    IMERCCITLDirectorEndorsement IMERCCITLDirectorEndorsement[]
}

model ActiveCITLDirector {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    CITLDirector   CITLDirector @relation(fields: [cITLDirectorId], references: [id])
    cITLDirectorId String       @unique
}

model IDDCoordinatorSuggestion {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    DeanEndorsement                   DeanEndorsement                    @relation(fields: [deanEndorsementId], references: [id], onDelete: Cascade)
    deanEndorsementId                 String                             @unique
    IDDCoordinator                    IDDCoordinator                     @relation(fields: [iDDCoordinatorId], references: [id])
    iDDCoordinatorId                  String
    IDDCoordinatorSuggestionItem      IDDCoordinatorSuggestionItem[]
    SubmittedIDDCoordinatorSuggestion SubmittedIDDCoordinatorSuggestion?
}

model IDDCoordinatorSuggestionItem {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    IDDCoordinatorSuggestion   IDDCoordinatorSuggestion @relation(fields: [iDDCoordinatorSuggestionId], references: [id], onDelete: Cascade)
    iDDCoordinatorSuggestionId String
    suggestion                 String
    actionTaken                String?
    remarks                    String?
    pageNumber                 Int
}

model SubmittedIDDCoordinatorSuggestion {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    IDDCoordinatorSuggestion   IDDCoordinatorSuggestion @relation(fields: [iDDCoordinatorSuggestionId], references: [id], onDelete: Cascade)
    iDDCoordinatorSuggestionId String                   @unique
    CITLRevision               CITLRevision[]
    Event                      Event[]
}

model CITLRevision {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    SubmittedIDDCoordinatorSuggestion   SubmittedIDDCoordinatorSuggestion @relation(fields: [submittedIDDCoordinatorSuggestionId], references: [id], onDelete: Cascade)
    submittedIDDCoordinatorSuggestionId String
    IMFile                              IMFile                            @relation(fields: [iMFileId], references: [id], onDelete: Cascade)
    iMFileId                            String                            @unique
    IDDCoordinatorEndorsement           IDDCoordinatorEndorsement?
    Event                               Event[]
    ReturnedCITLRevision                ReturnedCITLRevision?
}

model IDDCoordinatorEndorsement {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    IDDCoordinator          IDDCoordinator           @relation(fields: [iDDCoordinatorId], references: [id])
    iDDCoordinatorId        String
    CITLRevision            CITLRevision             @relation(fields: [cITLRevisionId], references: [id], onDelete: Cascade)
    cITLRevisionId          String                   @unique
    CITLDirectorEndorsement CITLDirectorEndorsement?
    Event                   Event[]
}

model CITLDirectorEndorsement {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    IDDCoordinatorEndorsement   IDDCoordinatorEndorsement @relation(fields: [iDDCoordinatorEndorsementId], references: [id], onDelete: Cascade)
    iDDCoordinatorEndorsementId String                    @unique
    CITLDirector                CITLDirector              @relation(fields: [cITLDirectorId], references: [id])
    cITLDirectorId              String
    QAMISSuggestion             QAMISSuggestion?
    Event                       Event[]
}

model QAMISSuggestion {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    CITLDirectorEndorsement   CITLDirectorEndorsement   @relation(fields: [cITLDirectorEndorsementId], references: [id], onDelete: Cascade)
    cITLDirectorEndorsementId String                    @unique
    QAMISSuggestionItem       QAMISSuggestionItem[]
    SubmittedQAMISSuggestion  SubmittedQAMISSuggestion?
}

model QAMISSuggestionItem {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    QAMISSuggestion   QAMISSuggestion @relation(fields: [qAMISSuggestionId], references: [id], onDelete: Cascade)
    qAMISSuggestionId String
    suggestion        String
    actionTaken       String?
    remarks           String?
    pageNumber        Int
}

model SubmittedQAMISSuggestion {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    QAMISSuggestion   QAMISSuggestion @relation(fields: [qAMISSuggestionId], references: [id], onDelete: Cascade)
    qAMISSuggestionId String          @unique
    QAMISRevision     QAMISRevision?
    QAMISFile         QAMISFile[]
}

model QAMISFile {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    filename                   String
    size                       Int
    mimetype                   String
    originalFilename           String
    SubmittedQAMISSuggestion   SubmittedQAMISSuggestion @relation(fields: [submittedQAMISSuggestionId], references: [id], onDelete: Cascade)
    submittedQAMISSuggestionId String
    QAMISRevision              QAMISRevision?
}

model QAMISRevision {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    QAMISFile                   QAMISFile                    @relation(fields: [qAMISFileId], references: [id], onDelete: Cascade)
    qAMISFileId                 String                       @unique
    SubmittedQAMISSuggestion    SubmittedQAMISSuggestion     @relation(fields: [submittedQAMISSuggestionId], references: [id], onDelete: Cascade)
    submittedQAMISSuggestionId  String                       @unique
    IMFile                      IMFile                       @relation(fields: [iMFileId], references: [id], onDelete: Cascade)
    iMFileId                    String                       @unique
    QAMISCoordinatorEndorsement QAMISCoordinatorEndorsement?
    QAMISChairpersonEndorsement QAMISChairpersonEndorsement?
    QAMISDeanEndorsement        QAMISDeanEndorsement?
    Event                       Event[]
}

model QAMISCoordinatorEndorsement {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    QAMISRevision              QAMISRevision               @relation(fields: [qAMISRevisionId], references: [id], onDelete: Cascade)
    qAMISRevisionId            String                      @unique
    Coordinator                Coordinator                 @relation(fields: [coordinatorId], references: [id])
    coordinatorId              String
    QAMISDepartmentEndorsement QAMISDepartmentEndorsement?
    Event                      Event[]
}

model QAMISChairpersonEndorsement {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    QAMISRevision              QAMISRevision               @relation(fields: [qAMISRevisionId], references: [id], onDelete: Cascade)
    qAMISRevisionId            String                      @unique
    Chairperson                Chairperson                 @relation(fields: [chairpersonId], references: [id])
    chairpersonId              String
    QAMISDepartmentEndorsement QAMISDepartmentEndorsement?
    Event                      Event[]
}

model QAMISDeanEndorsement {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    QAMISRevision              QAMISRevision               @relation(fields: [qAMISRevisionId], references: [id], onDelete: Cascade)
    qAMISRevisionId            String                      @unique
    Dean                       Dean                        @relation(fields: [deanId], references: [id])
    deanId                     String
    QAMISDepartmentEndorsement QAMISDepartmentEndorsement?
    Event                      Event[]
}

model QAMISDepartmentEndorsement {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    QAMISDeanEndorsement          QAMISDeanEndorsement        @relation(fields: [qAMISDeanEndorsementId], references: [id], onDelete: Cascade)
    qAMISDeanEndorsementId        String                      @unique
    QAMISChairpersonEndorsement   QAMISChairpersonEndorsement @relation(fields: [qAMISChairpersonEndorsementId], references: [id], onDelete: Cascade)
    qAMISChairpersonEndorsementId String                      @unique
    QAMISCoordinatorEndorsement   QAMISCoordinatorEndorsement @relation(fields: [qAMISCoordinatorEndorsementId], references: [id], onDelete: Cascade)
    qAMISCoordinatorEndorsementId String                      @unique
    ContentSpecialistReview       ContentSpecialistReview?
    ContentEditorReview           ContentEditorReview?
    IDDSpecialistReview           IDDSpecialistReview?
    Event                         Event[]
}

model ContentSpecialistReview {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    q1_1                         Rating?
    q1_2                         Rating?
    q2_1                         Rating?
    q2_2                         Rating?
    q2_3                         Rating?
    q2_4                         Rating?
    q3_1                         Rating?
    q4_1                         Rating?
    q4_2                         Rating?
    q4_3                         Rating?
    q5_1                         Rating?
    q5_2                         Rating?
    q5_3                         Rating?
    q5_4                         Rating?
    q6_1                         Rating?
    q6_2                         Rating?
    q6_3                         Rating?
    q6_4                         Rating?
    q6_5                         Rating?
    q7_1                         Rating?
    q7_2                         Rating?
    q7_3                         Rating?
    q7_4                         Rating?
    q7_5                         Rating?
    q8_1                         Rating?
    q8_2                         Rating?
    q8_3                         Rating?
    QAMISDepartmentEndorsement   QAMISDepartmentEndorsement   @relation(fields: [qAMISDepartmentEndorsementId], references: [id], onDelete: Cascade)
    qAMISDepartmentEndorsementId String                       @unique
    ContentSpecialistSuggestion  ContentSpecialistSuggestion?
    ContentSpecialist            ContentSpecialist            @relation(fields: [contentSpecialistId], references: [id])
    contentSpecialistId          String
}

model ContentSpecialistSuggestion {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    ContentSpecialistReview              ContentSpecialistReview               @relation(fields: [contentSpecialistReviewId], references: [id], onDelete: Cascade)
    contentSpecialistReviewId            String                                @unique
    ContentSpecialistSuggestionItem      ContentSpecialistSuggestionItem[]
    SubmittedContentSpecialistSuggestion SubmittedContentSpecialistSuggestion?
}

model ContentSpecialistSuggestionItem {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    ContentSpecialistSuggestion   ContentSpecialistSuggestion @relation(fields: [contentSpecialistSuggestionId], references: [id], onDelete: Cascade)
    contentSpecialistSuggestionId String
    suggestion                    String
    actionTaken                   String?
    remarks                       String?
    pageNumber                    Int
}

model SubmittedContentSpecialistSuggestion {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    ContentSpecialistSuggestion   ContentSpecialistSuggestion @relation(fields: [contentSpecialistSuggestionId], references: [id], onDelete: Cascade)
    contentSpecialistSuggestionId String                      @unique
    IMERCCITLReviewed             IMERCCITLReviewed?
    Event                         Event[]
}

model ContentEditorReview {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    q1_1                         Rating?
    q1_2                         Rating?
    q2_1                         Rating?
    q2_2                         Rating?
    q2_3                         Rating?
    q2_4                         Rating?
    q3_1                         Rating?
    q4_1                         Rating?
    q4_2                         Rating?
    q4_3                         Rating?
    q5_1                         Rating?
    q5_2                         Rating?
    q5_3                         Rating?
    q5_4                         Rating?
    q6_1                         Rating?
    q6_2                         Rating?
    q6_3                         Rating?
    q6_4                         Rating?
    q6_5                         Rating?
    q7_1                         Rating?
    q7_2                         Rating?
    q7_3                         Rating?
    q7_4                         Rating?
    q7_5                         Rating?
    q8_1                         Rating?
    q8_2                         Rating?
    q8_3                         Rating?
    CITLDirector                 CITLDirector               @relation(fields: [cITLDirectorId], references: [id])
    cITLDirectorId               String
    QAMISDepartmentEndorsement   QAMISDepartmentEndorsement @relation(fields: [qAMISDepartmentEndorsementId], references: [id], onDelete: Cascade)
    qAMISDepartmentEndorsementId String                     @unique
    ContentEditorSuggestion      ContentEditorSuggestion?
}

model ContentEditorSuggestion {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    ContentEditorReview              ContentEditorReview               @relation(fields: [contentEditorReviewId], references: [id], onDelete: Cascade)
    contentEditorReviewId            String                            @unique
    ContentEditorSuggestionItem      ContentEditorSuggestionItem[]
    SubmittedContentEditorSuggestion SubmittedContentEditorSuggestion?
}

model ContentEditorSuggestionItem {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    ContentEditorSuggestion   ContentEditorSuggestion @relation(fields: [contentEditorSuggestionId], references: [id], onDelete: Cascade)
    contentEditorSuggestionId String
    suggestion                String
    actionTaken               String?
    remarks                   String?
    pageNumber                Int
}

model SubmittedContentEditorSuggestion {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    ContentEditorSuggestion   ContentEditorSuggestion @relation(fields: [contentEditorSuggestionId], references: [id], onDelete: Cascade)
    contentEditorSuggestionId String                  @unique
    IMERCCITLReviewed         IMERCCITLReviewed?
    Event                     Event[]
}

model IDDSpecialistReview {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    q1_1                         Rating?
    q1_2                         Rating?
    q2_1                         Rating?
    q2_2                         Rating?
    q2_3                         Rating?
    q2_4                         Rating?
    q3_1                         Rating?
    q4_1                         Rating?
    q4_2                         Rating?
    q4_3                         Rating?
    q5_1                         Rating?
    q5_2                         Rating?
    q5_3                         Rating?
    q5_4                         Rating?
    q6_1                         Rating?
    q6_2                         Rating?
    q6_3                         Rating?
    q6_4                         Rating?
    q6_5                         Rating?
    q7_1                         Rating?
    q7_2                         Rating?
    q7_3                         Rating?
    q7_4                         Rating?
    q7_5                         Rating?
    q8_1                         Rating?
    q8_2                         Rating?
    q8_3                         Rating?
    IDDCoordinator               IDDCoordinator             @relation(fields: [iDDCoordinatorId], references: [id])
    iDDCoordinatorId             String
    QAMISDepartmentEndorsement   QAMISDepartmentEndorsement @relation(fields: [qAMISDepartmentEndorsementId], references: [id], onDelete: Cascade)
    qAMISDepartmentEndorsementId String                     @unique
    IDDSpecialistSuggestion      IDDSpecialistSuggestion?
}

model IDDSpecialistSuggestion {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    IDDSpecialistReview              IDDSpecialistReview               @relation(fields: [iDDSpecialistReviewId], references: [id], onDelete: Cascade)
    iDDSpecialistReviewId            String                            @unique
    SubmittedIDDSpecialistSuggestion SubmittedIDDSpecialistSuggestion?
    IDDSpecialistSuggestionItem      IDDSpecialistSuggestionItem[]
}

model IDDSpecialistSuggestionItem {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    IDDSpecialistSuggestion   IDDSpecialistSuggestion @relation(fields: [iDDSpecialistSuggestionId], references: [id], onDelete: Cascade)
    iDDSpecialistSuggestionId String
    suggestion                String
    actionTaken               String?
    remarks                   String?
    pageNumber                Int
}

model SubmittedIDDSpecialistSuggestion {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    IDDSpecialistSuggestion   IDDSpecialistSuggestion @relation(fields: [iDDSpecialistSuggestionId], references: [id], onDelete: Cascade)
    iDDSpecialistSuggestionId String                  @unique
    IMERCCITLReviewed         IMERCCITLReviewed?
    Event                     Event[]
}

model IMERCCITLReviewed {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    SubmittedIDDSpecialistSuggestion       SubmittedIDDSpecialistSuggestion     @relation(fields: [submittedIDDSpecialistSuggestionId], references: [id], onDelete: Cascade)
    submittedIDDSpecialistSuggestionId     String                               @unique
    SubmittedContentEditorSuggestion       SubmittedContentEditorSuggestion     @relation(fields: [submittedContentEditorSuggestionId], references: [id], onDelete: Cascade)
    submittedContentEditorSuggestionId     String                               @unique
    SubmittedContentSpecialistSuggestion   SubmittedContentSpecialistSuggestion @relation(fields: [submittedContentSpecialistSuggestionId], references: [id], onDelete: Cascade)
    submittedContentSpecialistSuggestionId String                               @unique
    IMERCCITLRevision                      IMERCCITLRevision[]
    Event                                  Event[]
}

model IMERCCITLRevision {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    PlagiarismFile                 PlagiarismFile                  @relation(fields: [plagiarismFileId], references: [id], onDelete: Cascade)
    plagiarismFileId               String
    IMERCCITLReviewed              IMERCCITLReviewed               @relation(fields: [iMERCCITLReviewedId], references: [id], onDelete: Cascade)
    iMERCCITLReviewedId            String
    IMFile                         IMFile                          @relation(fields: [iMFileId], references: [id], onDelete: Cascade)
    iMFileId                       String                          @unique
    IMERCIDDCoordinatorEndorsement IMERCIDDCoordinatorEndorsement?
    Event                          Event[]
    ReturnedIMERCCITLRevision      ReturnedIMERCCITLRevision?
}

model IMERCIDDCoordinatorEndorsement {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    IDDCoordinator               IDDCoordinator                @relation(fields: [iDDCoordinatorId], references: [id])
    iDDCoordinatorId             String
    IMERCCITLRevision            IMERCCITLRevision             @relation(fields: [iMERCCITLRevisionId], references: [id], onDelete: Cascade)
    iMERCCITLRevisionId          String                        @unique
    IMERCCITLDirectorEndorsement IMERCCITLDirectorEndorsement?
    Event                        Event[]
}

model IMERCCITLDirectorEndorsement {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    CITLDirector                     CITLDirector                   @relation(fields: [cITLDirectorId], references: [id])
    cITLDirectorId                   String
    IMERCIDDCoordinatorEndorsement   IMERCIDDCoordinatorEndorsement @relation(fields: [iMERCIDDCoordinatorEndorsementId], references: [id], onDelete: Cascade)
    iMERCIDDCoordinatorEndorsementId String                         @unique
    Event                            Event[]
}

model ContentSpecialist {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Faculty                 Faculty                   @relation(fields: [facultyId], references: [id])
    facultyId               String                    @unique
    ActiveContentSpecialist ActiveContentSpecialist?
    ContentSpecialistReview ContentSpecialistReview[]
}

model ActiveContentSpecialist {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    ContentSpecialist   ContentSpecialist @relation(fields: [contentSpecialistId], references: [id])
    contentSpecialistId String            @unique
}

enum EventType {
    IM_CREATED
    DEPARTMENT_REVIEW_CREATED
    SUBMITTED_PEER_SUGGESTION_CREATED
    SUBMITTED_COORDINATOR_SUGGESTION_CREATED
    SUBMITTED_CHAIRPERSON_SUGGESTION_CREATED
    DEPARTMENT_REVIEWED_CREATED
    DEPARTMENT_REVISION_CREATED
    COORDINATOR_ENDORSEMENT_CREATED
    DEAN_ENDORSEMENT_CREATED
    SUBMITTED_IDD_COORDINATOR_SUGGESTION_CREATED
    CITL_REVISION_CREATED
    IDD_COORDINATOR_ENDORSEMENT_CREATED
    CITL_DIRECTOR_ENDORSEMENT_CREATED
    QAMIS_REVISION_CREATED
    QAMIS_COORDINATOR_ENDORSEMENT_CREATED
    QAMIS_CHAIRPERSON_ENDORSEMENT_CREATED
    QAMIS_DEAN_ENDORSEMENT_CREATED
    QAMIS_DEPARTMENT_ENDORSEMENT_CREATED
    SUBMITTED_CONTENT_SPECIALIST_SUGGESTION_CREATED
    SUBMITTED_IDD_SPECIALIST_SUGGESTION_CREATED
    SUBMITTED_CONTENT_EDITOR_SUGGESTION_CREATED
    IMERC_CITL_REVIEWED_CREATED
    IMERC_CITL_REVISION_CREATED
    IMERC_IDD_COORDINATOR_ENDORSEMENT_CREATED
    IMERC_CITL_DIRECTOR_ENDORSEMENT_CREATED
    SUBMITTED_RETURNED_DEPARTMENT_REVISION_CREATED
    SUBMITTED_RETURNED_CITL_REVISION_CREATED
    SUBMITTED_RETURNED_IMERC_CITL_REVISION_CREATED
}

model Event {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    message                                String? // Tobe updated when returning request
    url                                    String? // Tobe updated when returning request
    User                                   User                                  @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId                                 String
    type                                   EventType
    IM                                     IM?                                   @relation(fields: [iMId], references: [id], onDelete: Cascade)
    iMId                                   String?
    DepartmentReview                       DepartmentReview?                     @relation(fields: [departmentReviewId], references: [id], onDelete: Cascade)
    departmentReviewId                     String?
    SubmittedPeerSuggestion                SubmittedPeerSuggestion?              @relation(fields: [submittedPeerSuggestionId], references: [id], onDelete: Cascade)
    submittedPeerSuggestionId              String?
    SubmittedCoordinatorSuggestion         SubmittedCoordinatorSuggestion?       @relation(fields: [submittedCoordinatorSuggestionId], references: [id], onDelete: Cascade)
    submittedCoordinatorSuggestionId       String?
    SubmittedChairpersonSuggestion         SubmittedChairpersonSuggestion?       @relation(fields: [submittedChairpersonSuggestionId], references: [id], onDelete: Cascade)
    submittedChairpersonSuggestionId       String?
    DepartmentReviewed                     DepartmentReviewed?                   @relation(fields: [departmentReviewedId], references: [id], onDelete: Cascade)
    departmentReviewedId                   String?
    DepartmentRevision                     DepartmentRevision?                   @relation(fields: [departmentRevisionId], references: [id], onDelete: Cascade)
    departmentRevisionId                   String?
    CoordinatorEndorsement                 CoordinatorEndorsement?               @relation(fields: [coordinatorEndorsementId], references: [id], onDelete: Cascade)
    coordinatorEndorsementId               String?
    DeanEndorsement                        DeanEndorsement?                      @relation(fields: [deanEndorsementId], references: [id], onDelete: Cascade)
    deanEndorsementId                      String?
    SubmittedIDDCoordinatorSuggestion      SubmittedIDDCoordinatorSuggestion?    @relation(fields: [submittedIDDCoordinatorSuggestionId], references: [id], onDelete: Cascade)
    submittedIDDCoordinatorSuggestionId    String?
    CITLRevision                           CITLRevision?                         @relation(fields: [cITLRevisionId], references: [id], onDelete: Cascade)
    cITLRevisionId                         String?
    IDDCoordinatorEndorsement              IDDCoordinatorEndorsement?            @relation(fields: [iDDCoordinatorEndorsementId], references: [id], onDelete: Cascade)
    iDDCoordinatorEndorsementId            String?
    CITLDirectorEndorsement                CITLDirectorEndorsement?              @relation(fields: [cITLDirectorEndorsementId], references: [id], onDelete: Cascade)
    cITLDirectorEndorsementId              String?
    QAMISRevision                          QAMISRevision?                        @relation(fields: [qAMISRevisionId], references: [id], onDelete: Cascade)
    qAMISRevisionId                        String?
    QAMISCoordinatorEndorsement            QAMISCoordinatorEndorsement?          @relation(fields: [qAMISCoordinatorEndorsementId], references: [id], onDelete: Cascade)
    qAMISCoordinatorEndorsementId          String?
    QAMISChairpersonEndorsement            QAMISChairpersonEndorsement?          @relation(fields: [qAMISChairpersonEndorsementId], references: [id], onDelete: Cascade)
    qAMISChairpersonEndorsementId          String?
    QAMISDeanEndorsement                   QAMISDeanEndorsement?                 @relation(fields: [qAMISDeanEndorsementId], references: [id], onDelete: Cascade)
    qAMISDeanEndorsementId                 String?
    QAMISDepartmentEndorsement             QAMISDepartmentEndorsement?           @relation(fields: [qAMISDepartmentEndorsementId], references: [id], onDelete: Cascade)
    qAMISDepartmentEndorsementId           String?
    SubmittedContentSpecialistSuggestion   SubmittedContentSpecialistSuggestion? @relation(fields: [submittedContentSpecialistSuggestionId], references: [id], onDelete: Cascade)
    submittedContentSpecialistSuggestionId String?
    SubmittedContentEditorSuggestion       SubmittedContentEditorSuggestion?     @relation(fields: [submittedContentEditorSuggestionId], references: [id], onDelete: Cascade)
    submittedContentEditorSuggestionId     String?
    SubmittedIDDSpecialistSuggestion       SubmittedIDDSpecialistSuggestion?     @relation(fields: [submittedIDDSpecialistSuggestionId], references: [id], onDelete: Cascade)
    submittedIDDSpecialistSuggestionId     String?
    IMERCCITLReviewed                      IMERCCITLReviewed?                    @relation(fields: [iMERCCITLReviewedId], references: [id], onDelete: Cascade)
    iMERCCITLReviewedId                    String?
    IMERCCITLRevision                      IMERCCITLRevision?                    @relation(fields: [iMERCCITLRevisionId], references: [id], onDelete: Cascade)
    iMERCCITLRevisionId                    String?
    IMERCIDDCoordinatorEndorsement         IMERCIDDCoordinatorEndorsement?       @relation(fields: [iMERCIDDCoordinatorEndorsementId], references: [id], onDelete: Cascade)
    iMERCIDDCoordinatorEndorsementId       String?
    IMERCCITLDirectorEndorsement           IMERCCITLDirectorEndorsement?         @relation(fields: [iMERCCITLDirectorEndorsementId], references: [id], onDelete: Cascade)
    iMERCCITLDirectorEndorsementId         String?
    SubmittedReturnedDepartmentRevision    SubmittedReturnedDepartmentRevision?  @relation(fields: [submittedReturnedDepartmentRevisionId], references: [id], onDelete: Cascade)
    submittedReturnedDepartmentRevisionId  String?
    SubmittedReturnedCITLRevision          SubmittedReturnedCITLRevision?        @relation(fields: [submittedReturnedCITLRevisionId], references: [id], onDelete: Cascade)
    submittedReturnedCITLRevisionId        String?
    SubmittedReturnedIMERCCITLRevision     SubmittedReturnedIMERCCITLRevision?   @relation(fields: [submittedReturnedIMERCCITLRevisionId], references: [id], onDelete: Cascade)
    submittedReturnedIMERCCITLRevisionId   String?
    NotificationRead                       NotificationRead[]
}

model NotificationRead {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    User    User   @relation(fields: [userId], references: [id])
    userId  String
    Event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
    eventId String
}

model ProfilePictureFile {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    User             User   @relation(fields: [userId], references: [id])
    userId           String
    filename         String
    size             Int
    mimetype         String
    originalFilename String
}

model PlagiarismFile {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    IM                IM                  @relation(fields: [iMId], references: [id], onDelete: Cascade)
    iMId              String
    filename          String
    size              Int
    mimetype          String
    originalFilename  String
    IMERCCITLRevision IMERCCITLRevision[]
}

model Announcement {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    title       String
    description String?
    url         String?
}

model ReturnedDepartmentRevision {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    DepartmentRevision                       DepartmentRevision                         @relation(fields: [departmentRevisionId], references: [id], onDelete: Cascade)
    departmentRevisionId                     String                                     @unique
    ReturnedDepartmentRevisionSuggestionItem ReturnedDepartmentRevisionSuggestionItem[]
    SubmittedReturnedDepartmentRevision      SubmittedReturnedDepartmentRevision?
    Coordinator                              Coordinator                                @relation(fields: [coordinatorId], references: [id])
    coordinatorId                            String
}

model ReturnedDepartmentRevisionSuggestionItem {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    ReturnedDepartmentRevision   ReturnedDepartmentRevision @relation(fields: [returnedDepartmentRevisionId], references: [id], onDelete: Cascade)
    returnedDepartmentRevisionId String
    suggestion                   String
    actionTaken                  String?
    remarks                      String?
    pageNumber                   Int
}

model SubmittedReturnedDepartmentRevision {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    ReturnedDepartmentRevision   ReturnedDepartmentRevision @relation(fields: [returnedDepartmentRevisionId], references: [id], onDelete: Cascade)
    returnedDepartmentRevisionId String                     @unique
    Event                        Event[]
}

model ReturnedCITLRevision {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    CITLRevision                       CITLRevision                         @relation(fields: [cITLRevisionId], references: [id], onDelete: Cascade)
    cITLRevisionId                     String                               @unique
    ReturnedCITLRevisionSuggestionItem ReturnedCITLRevisionSuggestionItem[]
    SubmittedReturnedCITLRevision      SubmittedReturnedCITLRevision?
    IDDCoordinator                     IDDCoordinator                       @relation(fields: [iDDCoordinatorId], references: [id])
    iDDCoordinatorId                   String
}

model ReturnedCITLRevisionSuggestionItem {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    ReturnedCITLRevision   ReturnedCITLRevision @relation(fields: [returnedCITLRevisionId], references: [id], onDelete: Cascade)
    returnedCITLRevisionId String
    suggestion             String
    actionTaken            String?
    remarks                String?
    pageNumber             Int
}

model SubmittedReturnedCITLRevision {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    ReturnedCITLRevision   ReturnedCITLRevision @relation(fields: [returnedCITLRevisionId], references: [id], onDelete: Cascade)
    returnedCITLRevisionId String               @unique
    Event                  Event[]
}

model ReturnedIMERCCITLRevision {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    IMERCCITLRevision                       IMERCCITLRevision                         @relation(fields: [iMERCCITLRevisionId], references: [id], onDelete: Cascade)
    iMERCCITLRevisionId                     String                                    @unique
    IDDCoordinator                          IDDCoordinator                            @relation(fields: [iDDCoordinatorId], references: [id])
    iDDCoordinatorId                        String
    ReturnedIMERCCITLRevisionSuggestionItem ReturnedIMERCCITLRevisionSuggestionItem[]
    SubmittedReturnedIMERCCITLRevision      SubmittedReturnedIMERCCITLRevision?
}

model ReturnedIMERCCITLRevisionSuggestionItem {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    ReturnedIMERCCITLRevision   ReturnedIMERCCITLRevision @relation(fields: [returnedIMERCCITLRevisionId], references: [id], onDelete: Cascade)
    returnedIMERCCITLRevisionId String
    suggestion                  String
    actionTaken                 String?
    remarks                     String?
    pageNumber                  Int
}

model SubmittedReturnedIMERCCITLRevision {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    ReturnedIMERCCITLRevision   ReturnedIMERCCITLRevision @relation(fields: [returnedIMERCCITLRevisionId], references: [id], onDelete: Cascade)
    returnedIMERCCITLRevisionId String                    @unique
    Event                       Event[]
}

model PeerSuggestionItemActionTaken {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    PeerSuggestionItem   PeerSuggestionItem @relation(fields: [peerSuggestionItemId], references: [id], onDelete: Cascade)
    peerSuggestionItemId String             @unique
    value                String
}

model ChairpersonSuggestionItemActionTaken {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    ChairpersonSuggestionItem   ChairpersonSuggestionItem @relation(fields: [chairpersonSuggestionItemId], references: [id], onDelete: Cascade)
    chairpersonSuggestionItemId String                    @unique
    value                       String
}

model CoordinatorSuggestionItemActionTaken {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    CoordinatorSuggestionItem   CoordinatorSuggestionItem @relation(fields: [coordinatorSuggestionItemId], references: [id], onDelete: Cascade)
    coordinatorSuggestionItemId String                    @unique
    value                       String
}
